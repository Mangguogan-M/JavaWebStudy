JSP
JSP概述
java server pages 服务器页面
JSP可用一种简单易懂的等式表示为：HTML+Java=JSP。
可以生成动态的HTML（拼标签）
以.jsp为后缀的文件，内容是以标签为主体，可以内嵌java代码，本质上是Servlet。
JSP使用
创建jsp文件
    首先先创建一个javaweb项目
        再webcontent下创建文件以.jsp结尾的文件


创建JSP默认编码 ISO-8859-1   访问页面出现乱码

JSP引擎
JSP引擎与JSP容器指的是同样的东西，他们都指用来统一管理和允许Web应用程序的软件。常见的JSP引擎有Tomcat、JRun等，最常用的就是Tomcat  
安装JSP引擎的计算机，其实就是Web服务器。大多人把Tomcat说成Web服务器，但其实Tomcat只是JSP容器(引擎)而已。之所以把Tomcat说成Web服务器，这样容易理解。
当浏览器要访问一个JSP文件时，JSP文件会经过JSP引擎转换为一个Servlet，被编译成class 然后通过class生成对象给用户进行响应。
JSP执行流程
请求JSP引擎，将文件生产java文件，将java文件编译为class文件，class创建对象，给用户响应。
JSP的组成
静态内容
指令
表达式
小脚本
声明区
注释
三大指令
1. 与页面属性相关的page指令
    page指令的作用：JSP指令用来设置整个JSP页面相关的属性，指令可以有多个属性，以键值对的形式表示，并用逗号隔开

    常用属性：
        language ：      语言
        import   ：      向生成的Servlet文件中添加导包
        contentType:    描述网页内容类型与编码格式
        extends：        我们可以指定JSP生成时 继承的Servlet类
        session:        是否可以使用session，默认true
        errorPage:      产生错误后，跳转的错误处理页面

2. include指令
        作用：将一个外部文件嵌入到另一个JSP或者HTML文件，同时解析这个页面中的JSP语句

        语法格式:
            <%@ include  file="引入页面所在路径" >

3. taglib指令
    使用标签库定义的新的自定义标签

    例如：
        <%@ taglib uri="tagliburl" prefix="别名";

        prefix:标签库引入时的别名，再使用标签中需要加入 别名:前缀
            有时我们再一个JSP文件中引入多个标签，prefix，也是用来区别不同标签库的！

        uri:用来匹配引入的标签库描述文件，对应标签库中的uri

        引入标签的jar包
JSTL标签库
taglib指令
使用JSTL标签
    第一步：引入相关jar包，JSTL标签 standard.jar 和 jstl.jar 两个jar包， 高版本引一个就可以了

    第二步：再jsp页面通过 taglib指令引入 核心标签库
        <%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

    第三步可以使用标签了
            test 条件
            <c:if test=""></c:if>           和程序中if一样

            items   要被循环的信息
            begin   开始的元素
            end     最后一个元素
            step    每一次迭代的步长
            var     代表当前条目的变量名称
            varStatus   循环状态的变量名称
            <c:forEach></c:forEach>         迭代标签，接受多种集合类型

            例如：
                <c:forEach var="i" begin="1" step="2" end="5">
                    ${i }
                </c:forEach>


            下面的三个标签是组合标签

            相当于java中的 switch-case结构
            <c:choose>  本身只当作 c:when 和 c:otherwise的父标签
                <c:when test=""></c:when>   用来判断条件是否成立
                <c:otherwise></c:otherwise>  在c:when 便签后，当 c:when 标签判断为false时候执行
            </c:choose>